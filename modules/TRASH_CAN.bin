# def freddy_AI():
#     global running

#     while True:
#         moving_room = random.choice(rooms) # Select a room to move to
#         room, animatronic = moving_room, " Freddy"
        
#         print(room, animatronic) # For debugging purposes only

#         systime.sleep(random.randint(6, 13)) # Sleep a random amount of time between 6 and 13 seconds

#         pygame.event.post(pygame.event.Event(REQUEST_STATIC)) # Make cameras static
#         systime.sleep(0.1) # Sleep for a moment to let Pygame catch up

#         open(PATH + "/data/f_location", "w").write(moving_room) # Write the new location to the AI file

#         if room == "Security Office":
#             systime.sleep(7)

#             if open(PATH + "/data/rightDoorStatus", "r").read() == "open":
#                 if (running == True) and currentPower != 0 and not currentPower < 0:
#                     pygame.event.post(pygame.event.Event(FREDDY_JUMPSCARE))

#         if currentPower == 0:
#             exit()

# def file_checksum(screen):
#     checksum_dirs= ["/assets", "/settings"]

#     full_checksum = []

#     for targetDIR in checksum_dirs:
#         generated_checksum = []
#         index = 0

#         for root, subfolders, filenames in os.walk(PATH + targetDIR):
#             generated_checksum.append(filenames)
#             for file in filenames:
#                 screen.fill((0,0,0))
#                 title_surf = pygame.image.load(PATH + "/assets/title_screen.png").convert() # Loads the image
#                 title_surf.set_colorkey((255,255,255), RLEACCEL) # Set the image's background to black to make it ~vanish~
#                 title_rect = title_surf.get_rect(center=(1920/2,1080/2,)) # Centers the image
#                 screen.blit(title_surf, title_rect) # Prepare the image to be shown on-screen
#                 txt = str(file)
#                 pixel_font = font.Font(PATH + "/assets/fonts/silkscreen.ttf", 22) # Load the pixelized font
#                 time_display = pixel_font.render(txt, True, (255,255,255)) # Render the text
#                 time_box = time_display.get_rect() # Get bounding box
#                 screen.blit(time_display, time_box) # Render
#                 pygame.event.get()
#                 display.update()
#             index += 1
        
#         full_checksum.append(generated_checksum)
#     full_checksum.append(manifest.appVersion)

#         # print(full_checksum)
#     if full_checksum != verified_checksum or full_checksum[len(full_checksum)-1] != verified_checksum[len(verified_checksum)-1]: # If the checksum is longer than the verified one, it's PROBABLYYY fine
#         screen.fill((0, 0, 0))
#         control_surf = image.load(PATH + "/assets/missing_asset_warning.png").convert() # Loads the image
#         control_surf.set_colorkey((0,0,0), RLEACCEL) # Set the image's background to black to make it ~vanish~
#         control_rect = control_surf.get_rect(center=(1920/2,1080/2,)) # Centers the image
#         screen.blit(control_surf, control_rect) # Prepare the image to be shown on-screen

#         # mixer.music.load(PATH + "/assets/audio/fh_disclaimer_xep_trial_1.wav")
#         # mixer.music.play()
#         display.flip()

#         waiting = True # Make the loop below run
#         # Create a new clock to configure key polling rate
#         polling_rate = time.Clock()

#         while waiting:
#             pressed_keys = key.get_pressed()

#             for event in pygame.event.get():
#                 if event.type == KEYDOWN:
#                     # If the Enter key is pressed, leave the controls screen
#                     if event.key == K_RETURN:
#                         waiting = False

#             polling_rate.tick(30)

# def djmm_AI():
#     global running
#     while True:
#         moving_room = random.choice(rooms) # Select a room to move to
#         room, animatronic = moving_room, " DJMM"
        
#         print(room, animatronic)

#         systime.sleep(random.randint(6, 13))

#         pygame.event.post(pygame.event.Event(REQUEST_STATIC))
#         systime.sleep(0.1)

#         open(PATH + "/data/djmm_location", "w").write(moving_room)

#         if room == "Security Office":
#             systime.sleep(7)

#             if open(PATH + "/data/leftDoorStatus", "r").read() == "open":
#                 if (running == True) and currentPower != 0 and not currentPower < 0:
#                     pygame.event.post(pygame.event.Event(DJMM_JUMPSCARE))
#                     exit()

#         if currentPower == 0 or running == False:
#             exit()